// Test acceleration in a constant electric field
//
// dp / dt = q E
// du / dt = q E / m c
// u_new = u_old + 2 q dt E / 2 m c
// u_new = u_old + 2 E ( q dt / 2 m c )
//
// u(n)  = 2 E ( q dt / 2 m c ) * n
// With q/m=1, dt=1, c=1, E=1
// u(n) = E n
//
// This input deck was written by:
//   Kevin J Bowers, Ph.D.
//   Plasma Physics Group (X-1)
//   Applied Physics Division
//   Los Alamos National Lab
// March/April 2004 - conversion of c++ test code into an input deck

////////////////////////////////////// RFB ////////////////////////////////////
// The process for porting these legacy tests to work with Kokkos was as follows:
// 1. Remove naming collision in `sp`. Some of the kokkos macros (currently)
// iterate over them, and there for can trash the value in sp
// 2. Add the below KOKKOS macros to ensure that:
//  a) The particles are copied to the device arrays
//  b) The fields are copied to the device arrays
//  c) The load_interpolator functions, which uses kokkos, has the data in the right place
//  d) The particles are brought back once we want to check their values
///////////////////////////////////////////////////////////////////////////////


begin_globals {
};

begin_initialization {
  double L  = 1e10;
  int npart = 131;
  int nstep = 100;

  define_units( 1, 1 );
  define_timestep( 1 );
  define_periodic_grid( 0, 0, 0,   // Grid low corner
                        L, L, L,   // Grid high corner
                        1, 1, 1,   // Grid resolution
                        1, 1, 1 ); // Processor configuration
  define_material( "vacuum", 1.0, 1.0, 0.0 );
  define_field_array();

  field(1,1,1).ex  = 1;
  field(1,2,1).ex  = 1;
  field(1,1,2).ex  = 1;
  field(1,2,2).ex  = 1;

  field(1,1,1).ey  = 2;
  field(1,1,2).ey  = 2;
  field(2,1,1).ey  = 2;
  field(2,1,2).ey  = 2;

  field(1,1,1).ez  = 3;
  field(2,1,1).ez  = 3;
  field(1,2,1).ez  = 3;
  field(2,2,1).ez  = 3;

  field_array->copy_to_device();

  species_t* sp; // We use this to iterate over species

  species_t * this_sp =
    define_species( "test_species", 1., 1., npart, npart, 0, 0 );

  sim_log("this_sp " << this_sp);

  repeat(npart)
  {
    inject_particle( this_sp,
                     uniform( rng(0), 0, L ),
                     uniform( rng(0), 0, L ),
                     uniform( rng(0), 0, L ),
                     0., 0., 0., 1., 0., 0 );
  }

  LIST_FOR_EACH( sp, species_list ) {
    sp->copy_to_device();
  }


  // We load this first, as the load_interpolator_array call uses device data
  interpolator_array->copy_to_device();

  // Hack into vpic internals
  int failed = 0;
  load_interpolator_array( interpolator_array, field_array );


  sim_log("this_sp " << this_sp);

  for( int n=0; n<nstep; n++ )
  {

      sim_log("STEP " << n);

      advance_p( this_sp, interpolator_array, field_array );

      //Kokkos::Experimental::contribute(accumulator_array->k_a_d, accumulator_array->k_a_sa);
      //accumulator_array->k_a_sa.reset_except(accumulator_array->k_a_d);

      // Copy data back for inspection on host
      LIST_FOR_EACH( sp, species_list ) {
        sp->copy_to_host();
      }

      for( int m=0; m<npart; m++ )
      {
          if( this_sp->p[m].ux != 1*(n+1) ||
                  this_sp->p[m].uy != 2*(n+1) ||
                  this_sp->p[m].uz != 3*(n+1) )
          {
              failed++;
              sim_log( n << " " <<
                      m << " " <<
                      this_sp->p[m].i  << " " <<
                      this_sp->p[m].dx << " " <<
                      this_sp->p[m].dy << " " <<
                      this_sp->p[m].dz << " " <<
                      this_sp->p[m].ux << " " <<
                      this_sp->p[m].uy << " " <<
                      this_sp->p[m].uz << " " <<
                      this_sp->p[m].w << " ux should be exact multiples of " << (n+1) );
          }
      }
  }

  if( failed ) { sim_log( "FAIL" ); abort(1); }
  sim_log( "pass" );
  halt_mp();
  exit(0);
}

begin_diagnostics {
}

begin_particle_injection {
}

begin_current_injection {
}

begin_field_injection {
}

begin_particle_collisions {
}
